1. Vector:
-Vector uses dynamic arrays as its underlying data structure.
-The array size is increased by 100% when it needs to grow. 
 (Doubles the size)
-It is a Legacy Class 

(the term "legacy class" refers to classes that were part of the original Java 1.0 and 1.1 releases but have since been largely replaced or supplemented by newer classes introduced in later versions of Java. These classes are still part of the Java Standard Edition (SE) library for backward compatibility, but they are generally not recommended for new code.)

Important points to remember:

1. What is the default capacity? (Capacity when elements are not added to the list) : 10

2. What is the initial capacity?  : 10

3. Does it allow duplicate elements?  : Yes

4. Does it allow null values?         : Yes

5. Does it maintain the insertion order?  : Yes

6. Does it maintain the sorted order?   : No

7. Does it offer the random access of elements?  : Yes

8. Is it synchronised?  : Yes

9. What is it good at?  :
Preferable When:
1. Synchronization Needs: When multi-threading is needed,
2. Data is increased exponentially (useful when more data is incoming)


Multi-Threading: Vectors are synchronized, meaning they are thread-safe. This makes them suitable for use in multi-threaded environments where multiple threads need to access and modify the list concurrently without causing data corruption.

Handling Exponential Data Growth: 
-Vectors can dynamically resize themselves to accommodate an increasing number of elements. This makes them efficient when the amount of data grows exponentially, as they can automatically handle the resizing without requiring manual intervention.
-Scenarios where data size increases rapidly and unpredictably.

-When we say that data grows exponentially, it means that the amount of data increases at a rate proportional to its current size. In other words, the data doubles (or increases by a constant factor) over regular intervals, leading to very rapid growth.

Disadvantages:
-Default capacity with 10 (Memory Consumption before adding objects)
-100% increase in size leads to more memory consumption.
-poor & slower performance due to synchronization

Replacing Vector with ArrayList:
-To Overcome These Disadvantages ArrayList is created.

Advantages of ArrayList Over Vector:
1. Default capacity is 0 when created, it changes to 10 only when the first element is added.
2. only 50% increase in memory
3. Since ArrayList is not Synchronized performance is Faster. If Multi-Threading arises, we can also make it Synchronized using 
Collections.synchronizedList()
